// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  dateCreated   DateTime  @default(now())
  isActive      Boolean   @default(false)
  isAdmin       Boolean   @default(false)

  transactions Transaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Item {
  id  Int @default(autoincrement()) @id
  name String
  description String
  price Int?
  quantity Int
  location String
  transactions Transaction[]

  affiliation Affiliation @relation(fields: [affiliationid], references: [id], onDelete: NoAction)
  purpose Purpose? @relation(fields: [purposeid], references: [id], onDelete: SetNull)
  storage Storage @relation(fields: [storageid], references: [id], onDelete: NoAction)

  affiliationid Int
  purposeid Int?
  storageid Int
}

model Affiliation {
  id  Int @default(autoincrement()) @id
  name String 
  items Item[]
}

model Purpose {
  id  Int @default(autoincrement()) @id
  name String
  items Item[]
}

model Storage {
  id  Int @default(autoincrement()) @id
  name String
  items Item[]
}

model Transaction {
  id  Int @default(autoincrement()) @id
  time DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  item Item @relation(fields: [itemId],references: [id], onDelete: Cascade)
  reason String?
  action Int

  itemId Int
  userId String
}